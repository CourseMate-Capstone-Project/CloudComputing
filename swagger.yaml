openapi: 3.0.0
info:
  title: Course Recommendation API
  version: 1.0.0
  description: |
    Welcome to the **CourseMate API** documentation! This API allows you to manage users, courses, 
    and recommendations for an enhanced learning experience. 
    Get started with our comprehensive authentication and course recommendation features.

servers:
  - url: https://capstone-project-442014.et.r.appspot.com/api
    description: Production server
  - url: http://localhost:8080/api
    description: Development Server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        username:
          type: string
          example: johndoe
        fullName:
          type: string
          example: John Doe
        email:
          type: string
          example: johndoe@example.com
        password:
          type: string
          format: password

    FavoriteCourse:
      type: object
      properties:
        title:
          type: string
          example: "Cloud Computing Fundamentals"
          description: Title of the course
        short_intro:
          type: string
          example: "Learn the basics of cloud computing and its applications"
          description: Short description of the course
        url:
          type: string
          example: "https://example.com/courses/cloud-computing"
          description: URL of the course
        predicted_category:
          type: string
          example: "Computer Science"
          description: Predicted category of the course

paths:
  /:
    get:
      tags:
        - General
      summary: API root endpoint
      responses:
        "200":
          description: Welcome message
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Welcome to the CourseMate API!"

  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register new user
      description: |
        Register a new user by providing a username, full name, email, and password.
        All fields are required.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: johndoe
                  description: Unique username for the user
                fullName:
                  type: string
                  example: John Doe
                  description: Full name of the user
                email:
                  type: string
                  example: johndoe@example.com
                  description: Valid email address of the user
                password:
                  type: string
                  format: password
                  description: Secure password for the user
      responses:
        201:
          description: User registered successfully
        400:
          description: Invalid input data (e.g., missing or invalid fields)
        409:
          description: Username or email already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Username or email already exists."

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login user
      description: |
        Authenticate a user by providing a valid username and password. 
        Returns a JWT token upon successful authentication.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: johndoe
                  description: Username of the user
                password:
                  type: string
                  format: password
                  description: Password associated with the username
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    description: JWT token for authentication
        401:
          description: Invalid username or password
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid username or password."
        400:
          description: Missing username or password
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Username and password are required."

  /auth/forgot-password:
    post:
      tags:
        - Authentication
      summary: Request password reset OTP
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
      responses:
        200:
          description: OTP sent successfully
        404:
          description: User not found
        500:
          description: Server error

  /auth/reset-password:
    post:
      tags:
        - Authentication
      summary: Reset password using OTP
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                otp:
                  type: string
                  minLength: 6
                  maxLength: 6
                newPassword:
                  type: string
                  format: password
      responses:
        200:
          description: Password reset successful
        400:
          description: Invalid or expired OTP
        500:
          description: Server error

  paths:
  /profile:
    get:
      tags:
        - Profile
      summary: Get user profile
      description: Retrieve the current user's profile information including username, full name, email, and profile picture
      security:
        - BearerAuth: []
      responses:
        200:
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"
        401:
          description: Unauthorized access - Invalid or missing token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No token, authorization denied"
        500:
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Server error occurred"

    put:
      tags:
        - Profile
      summary: Update user profile
      description: |
        Update user's profile information. Can update username and/or profile picture.
        Username must be unique. Profile picture will be stored in Google Cloud Storage.
      security:
        - BearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: New username (must be unique)
                  example: newusername
                profilePicture:
                  type: string
                  format: binary
                  description: New profile picture (optional)
      responses:
        200:
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"
        400:
          description: Invalid input or username already taken
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Username already exists"
        401:
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No token, authorization denied"
        413:
          description: File too large
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "File size exceeds limit"
        415:
          description: Unsupported file type
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unsupported file type"
        500:
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Failed to update profile"

  /favorites/toggle:
    post:
      tags:
        - Favorites
      summary: Toggle the favorite status of a course
      description: |
        Toggle the favorite status of a course for the logged-in user. 
        If the course is already favorited, it will be removed from favorites. 
        If not, it will be added to favorites.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FavoriteCourse"
      responses:
        200:
          description: Course favorite status toggled
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Course added to favorites" # or "Course removed from favorites"
        401:
          description: Unauthorized access - Invalid or missing token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized, please login"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "An error occurred while toggling the favorite status."

  /favorites:
    get:
      tags:
        - Favorites
      summary: Get user's favorite courses
      description: Retrieve all favorite courses for the authenticated user
      security:
        - BearerAuth: []
      responses:
        200:
          description: Favorite courses retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    user_id:
                      type: integer
                      example: 1
                    title:
                      type: string
                      example: "Cloud Computing Fundamentals"
                    short_intro:
                      type: string
                      example: "Learn the basics of cloud computing"
                    url:
                      type: string
                      example: "https://example.com/courses/cloud-computing"
                    predicted_category:
                      type: string
                      example: "Computer Science"
                    created_at:
                      type: string
                      format: date-time
                      example: "2024-12-04T17:31:28.000Z"
        401:
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No token, authorization denied"
        500:
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Failed to fetch favorite courses"
